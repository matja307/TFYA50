#include "simulation.h"

using namespace std;

/*-----------------------
CONSTRUCTOR
Parameters:
	int unit_cells_x				: Number of unit cells in x-direction
	int unit_cells_y				: Number of unit cells in y-direction
	int unit_cells_z				: Number of unit cells in x-direction
	int time_step					: Length of one time step
	int steps						: number of time steps for the simulation
	float temperature				: Simulation temperature
	float cutoff					: Cutoff distance for potential calculations
	float mass						: Mass of an atom
	float sigma						: Material constant sigma
	float epsilon					: Material constan epsilon
	float lattice_constant			: Lattice constant
	std::string crystal_structure	: Name of chrystal structure (fcc, hcp, bcc...)
	bool thermostat					: If a thermostat is employed
-
Creates a simulation object. 
Calls constructors for all atoms and the cell list. 
------------------------*/
Simulation::Simulation (int nunit_cells_x, int unit_cells_y, int unit_cells_z, int time_step,int steps,float temperature,float cutoff,float mass,float sigma,float epsilon,float lattice_constant,std::string new_crystal_structure,bool thermostat){
	crystal_structure=new_crystal_structure;
	create_list_of_atoms();


	for(int i=0;i<list_of_atoms.size();i++){
		cout << i<<endl;
		cout << list_of_atoms[i]->get_position()<<endl;
	}

	/* create_cell_list();
	Vec test1 (1,2,3);
	%Atom p (test1,1);
	Vec test2 (3,-1,4);
	Atom m (test2,1);

	test1 += test2;

	cout << test1 << endl;
	*/
    //Cell* myCell = new Cell(9,Vec(1,4,7));
    //myCell->add_atom(&m);
    //vector<Atom*> atomsVector;
    //atomsVector.insert(atomsVector.begin(), myCell->get_atoms_in_cell().begin(), myCell->get_atoms_in_cell().end());

    //cout << atomsVector[0]->get_position()<< endl;
	

	// Todo: Save all the input!	
}

/*-------------------------
DESTRUCTOR
Destroys all atoms and the 
cells and cell list.
-------------------------*/
Simulation::~Simulation (){

}

/*----------------------------
FUNCTION: run_simulation
Paramteters: None
Returns: Nothing
-
Here is the main loop for the 
simulation. Handles time steps, 
and everything that happes during
the simulation.
----------------------------*/
void Simulation::run_simulation(){

	// Todo: How often shall we update cell list?
}

/*-----------------------------
FUNCTION: create_list_of_atoms
Parameters: None
Returns: Nothing
-
Create all atoms and add them to the
vector list_of_atoms.
-----------------------------*/
void Simulation::create_list_of_atoms(){

	if(crystal_structure == "fcc"){
		fcc_structure();
	}
		/*
	// Calculate number of atoms
		Vec extra (0,0,0);
	if(crystal_structure == "fcc"){
	for(int i=1;i<=unit_cells_x;i++){
		Vec origin (0,0,0);
		list_of_atoms.push_back(new Atom(origin+extra,0.5));
		extra= Vec (lattice_constant,0,0);

	}
	
	}
     */
	//Todo: Lattice constant & crystal_structure & unit_cells_i
	//Todo: Create all atoms in this class? Convert from fcc to atom positions.
}

void Simulation::fcc_structure(){
	for(int i=0;i<unit_cells_x;i++){
		Vec origin (0,0,0);
		Vec extra (0,0,0);
		float cutoff = 0.5;
		if(i==0){
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
			extra = Vec(lattice_constant,0,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
			extra = Vec(0,lattice_constant,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
			extra = Vec(lattice_constant,lattice_constant,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
			extra = Vec(0.707*lattice_constant,0.707*lattice_constant,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
		}
		else{
			origin = Vec(i*lattice_constant,0,0);
			extra = Vec(lattice_constant,0,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));
			extra = Vec(lattice_constant,lattice_constant,0);
			extra +=origin;
			list_of_atoms.push_back(new Atom(origin+extra,cutoff));